学籍番号 1610396
氏名 高場雄太

課題1
code:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "tree.h"

// extern void searchBST(Node *n, int x);

Node *buildBST(Node *n, int key);
int path = 0;

int path_length( Node *n ){ //全パス数を求める関数
  if (n != NULL) {  //行きがけ処理を行う
      path = path + orderTree(n) -1;  //漸化式に基づくpathの値の更新
      path_length(n->left);
      path_length(n->right);
  }
  return path;
}


int main() {
  char line[512], *s;
  int key;
  int path;
  Node *root;

  printf("key values entered:\n");
  root = NULL;
  while (fgets(line, 512, stdin) != NULL) {
    s = strtok(line, ",");
    sscanf(s, "%d", &key);
    printf(" %2d", key);

    root = buildBST(root, key);

    while (s != NULL) {
      // 2回目以降は第１引数はNULL
      s = strtok(NULL, ",");
      if (s != NULL) {
        sscanf(s, "%d", &key);
        printf(" %2d", key);
        root = buildBST(root, key);
      }
    }
  }
  printf("\nthe BST:\n");
  printTree(root);

  path = path_length( root );
  printf("path length: %d\n", path);

  deleteTree(root);

  return 0;
}

tree.c の orderTree関数は以下
int orderTree(Node *n) {
  if (n != NULL) {
    return orderTree(n->left)+orderTree(n->right)+1;
  }else{
    return 0;
  }
}

実行結果:
yutanoMacBook-Pro:class_11 yuta$ ./pathLength < keybst.dat
key values entered:
 40 32 17 37 53 46 57
the BST:
node: 0 left: 1 right: 4 data: (null)
node: 1 left: 2 right: 3 data: (null)
node: 2 left: null right: null data: (null)
node: 3 left: null right: null data: (null)
node: 4 left: 5 right: 6 data: (null)
node: 5 left: null right: null data: (null)
node: 6 left: null right: null data: (null)
path length: 10

yutanoMacBook-Pro:class_11 yuta$ ./pathLength < keybst2.dat
key values entered:
 35 16 46 40 51 48 60
the BST:
node: 0 left: 1 right: 2 data: (null)
node: 1 left: null right: null data: (null)
node: 2 left: 3 right: 4 data: (null)
node: 3 left: null right: null data: (null)
node: 4 left: 5 right: 6 data: (null)
node: 5 left: null right: null data: (null)
node: 6 left: null right: null data: (null)
path length: 12

yutanoMacBook-Pro:class_11 yuta$ ./pathLength < keybst3.dat
key values entered:
 15  8  2 13 12 14 21 18 27 23 31
the BST:
node: 0 left: 1 right: 6 data: (null)
node: 1 left: 2 right: 3 data: (null)
node: 2 left: null right: null data: (null)
node: 3 left: 4 right: 5 data: (null)
node: 4 left: null right: null data: (null)
node: 5 left: null right: null data: (null)
node: 6 left: 7 right: 8 data: (null)
node: 7 left: null right: null data: (null)
node: 8 left: 9 right: 10 data: (null)
node: 9 left: null right: null data: (null)
node: 10 left: null right: null data: (null)
path length: 22

課題2
code
/*
 * main1.c
 */
#include <stdio.h>
#include <stdlib.h>
#include "clock.h"
#include "data.h"

extern void simplesort(int *d, int n);

#define NMAX 1000000

int main(int argc, char **argv) {
  int n;
  int dArray[NMAX];

  if (argc == 2)
    n = atoi(argv[1]);
  else {
    printf("Usage: mergesort n\n");
    return 1;
  }

  generateRandomData(dArray, n);
  startClock();
  simplesort(dArray, n);
  stopClock();
  printClock();

  return 0;
}

/*
* main2.c
*   for a binary search tree sorting method
*/
#include <stdio.h>
#include <stdlib.h>
#include "tree.h"
#include "data.h"
#include "clock.h"

#define NMAX 1000000
extern void buildBST(Node *n, int key);

int main(int argc, char **argv) {
  int i, n, dArray[NMAX], sArray[NMAX];
  Node *root;

  if (argc == 2)
    n = (int)atoi(argv[1]);
  else {
    printf("usage: bstsort n\n");
    return 1;
  }

  generateRandomData(dArray, n);

  startClock();
  root = newNodeBST(dArray[0]);
  for (i = 1; i < n; i++) {
    buildBST(root, dArray[i]);
  }
  saveKeyInOrder(root, sArray);
  stopClock();
  printClock();

  deleteTree(root);

  return 0;
}

/*
 * main3.c
 *  for a merge sorting method
 */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "data.h"
#include "clock.h"

#define NMAX 1000000

extern void merge_sort(int *a, int l, int r);

int main(int argc, char **argv) {
  int  n;
  int dArray[NMAX];

  if (argc == 2)
    n = atoi(argv[1]);
  else {
    printf("Usage: mergesort n\n");
    return 1;
  }

  generateRandomData(dArray, n);

  startClock();
  merge_sort(dArray, 0, n-1);
  stopClock();
  printClock();

  return 0;
 }

実行結果:
yutanoMacBook-Pro:class_11 yuta$ ./simplesort 1000
user time = 0.003255 (sec)
sys  time = 0.000004 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./simplesort 2000
user time = 0.015179 (sec)
sys  time = 0.000076 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./simplesort 5000
user time = 0.090775 (sec)
sys  time = 0.000657 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./simplesort 10000
user time = 0.349672 (sec)
sys  time = 0.002001 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./simplesort 20000
user time = 1.452222 (sec)
sys  time = 0.002985 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./simplesort 50000
user time = 8.998429 (sec)
sys  time = 0.017730 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./simplesort 100000
user time = 36.176724 (sec)
sys  time = 0.185563 (sec)

yutanoMacBook-Pro:class_11 yuta$ ./bstsort 1000
user time = 0.000320 (sec)
sys  time = 0.000018 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./bstsort 2000
user time = 0.000636 (sec)
sys  time = 0.000028 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./bstsort 5000
user time = 0.001554 (sec)
sys  time = 0.000067 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./bstsort 10000
user time = 0.003203 (sec)
sys  time = 0.000120 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./bstsort 20000
user time = 0.009810 (sec)
sys  time = 0.000453 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./bstsort 50000
user time = 0.022734 (sec)
sys  time = 0.000775 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./bstsort 100000
user time = 0.055340 (sec)
sys  time = 0.001924 (sec)

yutanoMacBook-Pro:class_11 yuta$ ./mergesort 1000
user time = 0.000183 (sec)
sys  time = 0.000002 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./mergesort 2000
user time = 0.000316 (sec)
sys  time = 0.000003 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./mergesort 5000
user time = 0.001501 (sec)
sys  time = 0.000021 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./mergesort 10000
user time = 0.001920 (sec)
sys  time = 0.000016 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./mergesort 20000
user time = 0.004062 (sec)
sys  time = 0.000038 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./mergesort 50000
user time = 0.010654 (sec)
sys  time = 0.000079 (sec)
yutanoMacBook-Pro:class_11 yuta$ ./mergesort 100000
user time = 0.022207 (sec)
sys  time = 0.000190 (sec)

グラフはレポートの最後に添付する

考察:
simplesortでは要素数が2000を超えたあたりから爆発的に計算時間が増加した。
これは計算時間が N^2 のオーダーであることが原因であると考えられる。
bstsortでは、緩やかな曲線を描いて増加していった。
これは計算時間が　NlogN のオーダーであることが原因であると考えられる。
mergesortではbstsortよりも緩やかな曲線を描いて増加していった。
これは半分に分けて比較をしていることから、計算時間がbstsortよりも少ないことが原因であると考えられる。
