課題2
code
// キュー（ポインタを用いたリスト構造による実現）

#include <stdio.h>
#include <stdlib.h>

// ノードを表す構造体
typedef struct _Node {
  int data;
  struct _Node *next;
} Node;

// キューを表す構造体
typedef struct {
  Node *head;
  Node *tail;
} Queue;

Node *gen_node(void);
Queue *gen_queue(void);
int is_empty(Queue *q);
void enqueue(Queue *q,int data);
void disp_queue_0(Queue *q);
void disp_queue_1(Queue *q);


int main()
{
  Queue *q_0, *q_1;
  q_0=gen_queue();    //偶数のキュー
  q_1=gen_queue();    //奇数のキュー

    int menu, data;

    while(scanf("%d", &data)!=EOF){
      if (data % 2 == 1){
        enqueue(q_1,data);    //奇数ならq_1に代入
      }else{
        enqueue(q_0,data);    //偶数ならq_0に代入
      }
    }

    disp_queue_0(q_0);
    disp_queue_1(q_1);

  return 0;
}

Queue *gen_queue(void)
{
  Queue *q;

  q=(Queue *)calloc(1,sizeof(Queue));
// q=(Queue *)malloc(sizeof(Queue));
  q->head=q->head=NULL;

  return q;
}

int is_empty(Queue *q)
{
  if (q->head==NULL){
    return 1;
  } else {
    return 0;
  }
}

void enqueue(Queue *q,int data)
{
  Node *new;

  new=gen_node();
  new->data=data;
  new->next=NULL;

  if (is_empty(q)){
    q->head=q->tail=new;
  } else {
    q->tail->next=new;
    q->tail=new;
  }
}

int dequeue(Queue *q)
{
  int data;
  Node *old;

  if (is_empty(q)){
    printf("In function dequeue: queue is empty.\n");
    exit(1);
  }
  old=q->head;
  data=old->data;
  q->head=old->next;
  free(old);

  return data;
}

void disp_queue_0(Queue *q)
{
  Node *ptr;

  ptr=q->head;
  while(ptr!=NULL){
    printf("Q[0]: %d \n",ptr->data);
    ptr=ptr->next;
  }
}

void disp_queue_1(Queue *q)
{
  Node *ptr;

  ptr=q->head;
  while(ptr!=NULL){
    printf("Q[1]: %d \n",ptr->data);
    ptr=ptr->next;
  }
}

Node *gen_node(void)
{
  return (Node *)calloc(1,sizeof(Node));
// return (Node *)malloc(sizeof(Node));
}

実行結果
yutanoMacBook-Pro:class_05 yuta$ ./test01 <number.txt
Q[0]: 2
Q[0]: 4
Q[0]: 6
Q[0]: 8
Q[0]: 10
Q[0]: 12
Q[0]: 14
Q[0]: 16
Q[0]: 18
Q[0]: 20
Q[0]: 22
Q[0]: 24
Q[0]: 26
Q[0]: 28
Q[0]: 30
Q[0]: 32
Q[0]: 34
Q[0]: 36
Q[0]: 38
Q[0]: 40
Q[0]: 42
Q[0]: 44
Q[0]: 46
Q[0]: 48
Q[0]: 50
Q[0]: 52
Q[0]: 54
Q[0]: 56
Q[0]: 58
Q[0]: 60
Q[0]: 62
Q[0]: 64
Q[0]: 66
Q[0]: 68
Q[0]: 70
Q[0]: 72
Q[0]: 74
Q[0]: 76
Q[0]: 78
Q[0]: 80
Q[0]: 82
Q[0]: 84
Q[0]: 86
Q[0]: 88
Q[0]: 90
Q[0]: 92
Q[0]: 94
Q[0]: 96
Q[0]: 98
Q[0]: 100
Q[1]: 1
Q[1]: 3
Q[1]: 5
Q[1]: 7
Q[1]: 9
Q[1]: 11
Q[1]: 13
Q[1]: 15
Q[1]: 17
Q[1]: 19
Q[1]: 21
Q[1]: 23
Q[1]: 25
Q[1]: 27
Q[1]: 29
Q[1]: 31
Q[1]: 33
Q[1]: 35
Q[1]: 37
Q[1]: 39
Q[1]: 41
Q[1]: 43
Q[1]: 45
Q[1]: 47
Q[1]: 49
Q[1]: 51
Q[1]: 53
Q[1]: 55
Q[1]: 57
Q[1]: 59
Q[1]: 61
Q[1]: 63
Q[1]: 65
Q[1]: 67
Q[1]: 69
Q[1]: 71
Q[1]: 73
Q[1]: 75
Q[1]: 77
Q[1]: 79
Q[1]: 81
Q[1]: 83
Q[1]: 85
Q[1]: 87
Q[1]: 89
Q[1]: 91
Q[1]: 93
Q[1]: 95
Q[1]: 97
Q[1]: 99

課題3
code
// スタック（ポインタを用いたリスト構造による実現）

#include <stdio.h>
#include <stdlib.h>

// ノードを表す構造体
typedef struct _Node {
  int data;
  struct _Node *next;
} Node;

// スタックを表す構造体
typedef struct {
  Node *top; // スタックの頂上
} Stack;

Node *gen_node(void);
Stack *gen_stack(void);
int is_empty(Stack *q);
void push(Stack *s,int data);
int pop(Stack *s);
void disp_stack(Stack *s);

int main()
{
  Stack *s_0, *s_1, *s_2; // スタックの実態のアドレスを表すポインタ変数
  s_0=gen_stack(); // スタックの実態をメモリに生成して，アドレスをポインタ変数sに格納
  s_1=gen_stack();
  s_2=gen_stack();
  int menu, data, i;

  for ( i=10; i<=40; i=i+10 ){
    data = i;
    push(s_0,data);
  }
  printf("s[0]: TOP| "); disp_stack(s_0); printf("|BOTTOM\n");

  while ( is_empty(s_0) != 1 ){
    data=pop(s_0);
    push(s_1,data);
  }
  printf("s[1]: TOP| "); disp_stack(s_1); printf("|BOTTOM\n");

  while ( is_empty(s_1) != 1 ){
    data=pop(s_1);
    push(s_2,data);
  }
  printf("s[2]: TOP| "); disp_stack(s_2); printf("|BOTTOM\n");

  while ( is_empty(s_2) != 1 ){
    data=pop(s_2);
    push(s_0,data);
  }
  printf("s[0]: TOP| "); disp_stack(s_0); printf("|BOTTOM\n");

  return 0;
}

Stack *gen_stack(void)
{
  Stack *s;

  s=(Stack *)calloc(1,sizeof(Stack));
// s=(Stack *)malloc(sizeof(Stack));
  s->top=NULL; // 空のスタックで初期化

  return s;
}

int is_empty(Stack *s)
{
  if (s->top==NULL){
    return 1;
  } else {
    return 0;
  }
}

void push(Stack *s,int data)
{
  Node *new;

  // 新しいノードを生成して，これまでの頂上に追加
  new=gen_node();
  new->data=data;
  new->next=s->top;
  // 頂上を追加ノードに更新
  s->top=new;
}

int pop(Stack *s)
{
  int data;
  Node *old;

  if (is_empty(s)){
    printf("In function pop: stack is empty.\n");
    exit(1);
  }
  old=s->top;
  data=old->data;
  s->top=old->next;
  free(old);

  return data;
}

void disp_stack(Stack *s)
{
  Node *ptr;

  ptr=s->top;
  while(ptr!=NULL){
    printf("%d ",ptr->data);
    ptr=ptr->next;
  }
}

Node *gen_node(void)
{
  return (Node *)calloc(1,sizeof(Node));
// return (Node *)malloc(sizeof(Node));
}

実行結果
yutanoMacBook-Pro:class_05 yuta$ ./test02
s[0]: TOP| 40 30 20 10 |BOTTOM
s[1]: TOP| 10 20 30 40 |BOTTOM
s[2]: TOP| 40 30 20 10 |BOTTOM
s[0]: TOP| 10 20 30 40 |BOTTOM
